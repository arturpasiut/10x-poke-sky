---
import type { PokemonDetailResponseDto } from "@/types";
import { Badge, type BadgeTone } from "@/components/ui/badge";

import MainLayout from "../../layouts/MainLayout.astro";
import { PokemonFavoriteAction } from "../../components/pokemon/PokemonFavoriteAction";
import { EvolutionBranchTabs } from "../../components/pokemon/evolution/EvolutionBranchTabs";
import { EvolutionTimelineContainer } from "../../components/pokemon/evolution/EvolutionTimelineContainer";
import { PokemonMovesGrid } from "../../components/pokemon/moves/PokemonMovesGrid";
import { PokemonStatsPanel } from "../../components/pokemon/PokemonStatsPanel";
import { fetchPokemonDetailFromEdge } from "../../lib/api/pokemon-service";

const { identifier: rawIdentifier } = Astro.params;

if (!rawIdentifier) {
  Astro.response.status = 404;
  throw new Error("Brak identyfikatora Pokémona w adresie.");
}

const normalizeName = (value: string) =>
  value
    .split("-")
    .filter(Boolean)
    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
    .join(" ");

let detail: PokemonDetailResponseDto | null = null;
let errorMessage: string | null = null;

try {
  const response = await fetchPokemonDetailFromEdge(rawIdentifier, { baseUrl: Astro.url });
  detail = response.data;
} catch (error) {
  errorMessage =
    error instanceof Error ? error.message : "Nie udało się pobrać szczegółów Pokémona. Spróbuj ponownie później.";
  const lower = errorMessage.toLowerCase();
  if (lower.includes("404")) {
    Astro.response.status = 404;
  } else if (lower.includes("timeout") || lower.includes("failed to fetch")) {
    Astro.response.status = 504;
  } else {
    Astro.response.status = 502;
  }
}

const TYPE_COLORS: Record<string, string> = {
  bug: "#179A55",
  dark: "#040706",
  dragon: "#378A94",
  electric: "#E0E64B",
  fairy: "#9E1A44",
  fire: "#B22328",
  flying: "#90B1C5",
  ghost: "#363069",
  ice: "#7ECFF2",
  poison: "#642785",
  psychic: "#AC296B",
  rock: "#4B190E",
  steel: "#5C756D",
  water: "#2648DC",
  fighting: "#9F422A",
  grass: "#007C42",
  ground: "#AD7235",
  normal: "#B8B6B3",
};

const GENERATION_LABELS: Record<string, string> = {
  "generation-i": "I",
  "generation-ii": "II",
  "generation-iii": "III",
  "generation-iv": "IV",
  "generation-v": "V",
  "generation-vi": "VI",
  "generation-vii": "VII",
  "generation-viii": "VIII",
  "generation-ix": "IX",
};

const formatGenerationLabel = (value: string | null | undefined) => {
  if (!value) return null;
  return GENERATION_LABELS[value] ?? value.replace("generation-", "").toUpperCase();
};

const formatRegionLabel = (value: string | null | undefined) => {
  if (!value) return null;
  return value.charAt(0).toUpperCase() + value.slice(1);
};

const TYPE_TONE_MAP: Record<string, BadgeTone> = {
  bug: "bug",
  dark: "dark",
  dragon: "dragon",
  electric: "electric",
  fairy: "fairy",
  fire: "fire",
  flying: "flying",
  ghost: "ghost",
  ice: "ice",
  poison: "poison",
  psychic: "psychic",
  rock: "rock",
  steel: "steel",
  water: "water",
  fighting: "fighting",
  grass: "grass",
  ground: "ground",
  normal: "normal",
};

const summary = detail?.summary ?? null;
const formattedName = summary ? normalizeName(summary.name) : normalizeName(rawIdentifier);
const dexNumber = summary ? `#${String(summary.pokemonId).padStart(3, "0")}` : null;
const pageTitle = summary ? `${formattedName} – Pokédex – 10x Poke Sky` : `Pokémon – 10x Poke Sky`;
const types = summary?.types ?? [];
const typedBadges = types.map((type) => ({
  raw: type,
  label: normalizeName(type),
  tone: TYPE_TONE_MAP[type.toLowerCase()] ?? undefined,
}));
const generationLabel = formatGenerationLabel(summary?.generation ?? null);
const regionLabel = formatRegionLabel(summary?.region ?? null);
const metadata = [
  generationLabel ? { label: "Generacja", value: generationLabel } : null,
  regionLabel ? { label: "Region", value: regionLabel } : null,
].filter(Boolean);

const preservedBackParams = new URLSearchParams();
const allowedBackKeys = ["q", "type", "generation", "region"];
allowedBackKeys.forEach((key) => {
  const value = Astro.url.searchParams.get(key);
  if (value) {
    preservedBackParams.set(key, value);
  }
});

const backHref = preservedBackParams.size > 0 ? `/pokemon?${preservedBackParams.toString()}` : "/pokemon";
const spriteUrl = summary?.spriteUrl ?? detail?.pokemon?.sprites?.other?.["official-artwork"]?.front_default ?? null;

const typeGradientStart = types[0] ? (TYPE_COLORS[types[0]] ?? "#1f2937") : "#1f2937";
const typeGradientEnd = types[1] ? (TYPE_COLORS[types[1]] ?? "#111827") : "#111827";
const gradientStyle = `background: radial-gradient(circle at 20% 20%, ${typeGradientStart} 0%, ${typeGradientEnd} 45%, rgba(17,23,39,0.95) 70%);`;
---

<MainLayout title={pageTitle}>
  <nav class="flex items-center justify-between gap-6 text-sm text-muted-foreground">
    <a class="inline-flex items-center gap-2 text-primary transition hover:text-primary/80" href={backHref}>
      <span aria-hidden="true">←</span>
      Wróć do wyników
    </a>
    <a class="inline-flex items-center gap-2 transition hover:text-primary/80" href="/pokemon"> Cały Pokédex → </a>
  </nav>

  {
    errorMessage ? (
      <section class="mt-10 space-y-4">
        <div class="rounded-3xl border border-red-500/40 bg-red-500/10 p-6 text-red-200 backdrop-blur">
          <h1 class="text-2xl font-semibold">Nie udało się pobrać szczegółów Pokémona.</h1>
          <p class="mt-2 text-sm">{errorMessage}</p>
        </div>
        <a class="inline-flex items-center gap-2 text-primary transition hover:text-primary/80" href="/pokemon">
          ← Powrót do Pokédexu
        </a>
      </section>
    ) : null
  }

  {
    detail ? (
      <section class="mt-10 space-y-10">
        <div
          class="relative overflow-hidden rounded-3xl border border-white/10 bg-gradient-to-br text-white shadow-2xl shadow-black/20"
          style={gradientStyle}
        >
          <div
            class="absolute inset-0 opacity-50"
            style="background-image: radial-gradient(circle, rgba(255,255,255,0.12) 0%, transparent 60%);"
          />
          <div class="relative grid gap-8 p-8 md:grid-cols-[minmax(0,360px)_1fr] md:gap-12 md:p-12">
            <header class="flex flex-col justify-between gap-6">
              <div class="flex items-center justify-between gap-6">
                <p class="rounded-full border border-white/20 bg-white/10 px-4 py-1 text-xs uppercase tracking-[0.4em] text-white/70">
                  Pokédex
                </p>

                <div class="flex items-center gap-3 text-white">
                  {summary && (
                    <PokemonFavoriteAction client:load pokemonId={summary.pokemonId} pokemonName={formattedName} />
                  )}
                </div>
              </div>
              {spriteUrl ? (
                <div class="relative flex h-48 w-48 items-center justify-center rounded-[40px] bg-black/10 p-6 backdrop-blur-sm shadow-inner shadow-black/30 md:h-64 md:w-64">
                  <img
                    class="h-full w-full object-contain drop-shadow-[0_18px_32px_rgba(0,0,0,0.35)]"
                    src={spriteUrl}
                    alt={formattedName}
                    loading="lazy"
                  />
                </div>
              ) : (
                <div class="flex h-40 w-40 items-center justify-center rounded-full bg-muted/30 text-muted-foreground">
                  Brak grafiki
                </div>
              )}

              <div class="space-y-3">
                <div class="space-y-2">
                  <p class="text-sm uppercase tracking-[0.35em] text-white/60">Pokémon</p>
                  <h1 class="text-4xl font-semibold capitalize tracking-tight text-white sm:text-5xl">
                    {formattedName}
                  </h1>
                  {dexNumber ? <p class="text-sm font-medium text-white/70">{dexNumber}</p> : null}
                </div>
                <div class="flex flex-wrap items-center justify-center gap-3">
                  {typedBadges.map(({ raw, label, tone }) => (
                    <Badge
                      tone={tone}
                      key={raw}
                      variant="surface"
                      class="rounded-full border-white/20 bg-white/10 px-4 py-2 text-sm font-medium tracking-normal text-white shadow-sm shadow-black/30 backdrop-blur"
                    >
                      {label}
                    </Badge>
                  ))}
                </div>
                {metadata.length ? (
                  <dl class="flex flex-wrap items-center justify-center gap-6 text-xs font-medium uppercase tracking-[0.35em] text-white/60">
                    {metadata.map((entry) => {
                      if (!entry) return null;
                      return (
                        <div class="flex flex-col items-center gap-1" key={entry.label}>
                          <dt>{entry.label}</dt>
                          <dd class="text-sm tracking-normal text-white">{entry.value}</dd>
                        </div>
                      );
                    })}
                  </dl>
                ) : null}
              </div>

              {summary?.cachedAt ? (
                <p class="text-[0.7rem] uppercase tracking-[0.4em] text-white/40">
                  Odświeżono {new Date(summary.cachedAt).toLocaleString()}
                </p>
              ) : null}
            </header>

            <article class="space-y-6 text-sm text-white/90">
              <div class="space-y-3 rounded-3xl border border-white/10 bg-white/5 p-6 shadow-lg shadow-black/20 backdrop-blur">
                <h2 class="text-lg font-semibold text-white">Opis gatunku</h2>
                <p class="text-white/80">
                  Dane szczegółowe i wizualizacje pojawią się w kolejnych krokach fazy 4. Wkrótce dodamy możliwość
                  porównywania Pokémonów, ich ról oraz rekomendowanych drużyn.
                </p>
              </div>
              <div class="space-y-3 rounded-3xl border border-white/10 bg-white/5 p-6 shadow-lg shadow-black/20 backdrop-blur">
                <h2 class="text-lg font-semibold text-white">Ciekawostki</h2>
                <ul class="space-y-2 text-white/80">
                  <li>• Dostępnych ruchów: {detail.moves?.length ?? 0}</li>
                  <li>• Liczba form w PokeAPI: {detail.pokemon.forms?.length ?? 0}</li>
                  <li>• Statystyki bazowe: {detail.pokemon.stats?.length ?? 0}</li>
                </ul>
              </div>
            </article>
          </div>
        </div>

        <div class="grid gap-6 lg:grid-cols-[minmax(0,360px)_1fr]">
          <article class="rounded-3xl border border-border/30 bg-surface/80 p-6 shadow-sm backdrop-blur">
            <h2 class="text-lg font-semibold text-foreground">Statystyki bazowe</h2>
            <p class="mt-2 text-sm text-muted-foreground">
              Wartości bazowe pochodzą z PokeAPI i pozwalają szybko porównać Pokémona z innymi w drużynie.
            </p>
            <div class="mt-6">
              <PokemonStatsPanel client:load stats={detail.pokemon.stats ?? []} />
            </div>
          </article>

          <article class="rounded-3xl border border-border/30 bg-surface/80 p-6 shadow-sm backdrop-blur">
            <h2 class="text-lg font-semibold text-foreground">Metryki podstawowe</h2>
            <p class="mt-2 text-sm text-muted-foreground">
              Dane szczegółowe i wizualizacje pojawią się w kolejnych krokach fazy 4.
            </p>
            <dl class="mt-6 space-y-4 text-sm text-muted-foreground">
              <div class="flex items-center justify-between rounded-xl bg-muted/20 px-4 py-3">
                <dt>Waga</dt>
                <dd class="font-medium text-foreground">
                  {detail.pokemon.weight ? `${detail.pokemon.weight / 10} kg` : "—"}
                </dd>
              </div>
              <div class="flex items-center justify-between rounded-xl bg-muted/20 px-4 py-3">
                <dt>Wzrost</dt>
                <dd class="font-medium text-foreground">
                  {detail.pokemon.height ? `${detail.pokemon.height / 10} m` : "—"}
                </dd>
              </div>
              <div class="flex items-center justify-between rounded-xl bg-muted/20 px-4 py-3">
                <dt>Typy</dt>
                <dd class="font-medium text-foreground">
                  {typedBadges.length ? typedBadges.map((item) => item.label).join(", ") : "—"}
                </dd>
              </div>
            </dl>
          </article>
        </div>

        <section class="space-y-6">
          <article class="rounded-3xl border border-border/30 bg-surface/80 p-6 shadow-sm backdrop-blur">
            <h2 class="text-lg font-semibold text-foreground">Łańcuch ewolucji</h2>
            <p class="mt-2 text-sm text-muted-foreground">
              Śledź jak {formattedName} zmienia się w kolejnych formach. Wskazujemy wymagane warunki w skrócie.
            </p>
            <div class="mt-6 space-y-4">
              {detail.evolutionChainDto ? (
                <>
                  <EvolutionBranchTabs
                    client:load
                    chainId={detail.evolutionChainDto.chainId}
                    branches={detail.evolutionChainDto.branches}
                  />
                  <EvolutionTimelineContainer client:load chain={detail.evolutionChainDto} />
                </>
              ) : (
                <p class="rounded-2xl border border-border/40 bg-muted/10 px-4 py-6 text-sm text-muted-foreground">
                  Brak zdefiniowanego łańcucha ewolucji dla tego Pokémona.
                </p>
              )}
            </div>
          </article>

          <article class="rounded-3xl border border-border/30 bg-surface/80 p-6 shadow-sm backdrop-blur">
            <h2 class="text-lg font-semibold text-foreground">Wybrane ruchy</h2>
            <p class="mt-2 text-sm text-muted-foreground">
              Lista obejmuje pierwsze {detail.moves?.length ? Math.min(12, detail.moves.length) : 0} ruchów dostępnych
              dla Pokémona. Pełny katalog będzie dostępny w sekcji ruchów.
            </p>
            <div class="mt-6">
              <PokemonMovesGrid client:load moves={detail.moves ?? []} />
            </div>
          </article>
        </section>
      </section>
    ) : null
  }
</MainLayout>

export const prerender = false;
